# Makefile pour le d√©ploiement du gestionnaire NFC
.PHONY: help build up down restart logs clean dev test lint typecheck migrate

# Variables
COMPOSE_FILE := docker-compose.yml
COMPOSE_DEV_FILE := docker-compose.dev.yml
BACKEND_PORT ?= 5000
FRONTEND_PORT ?= 3000

# Aide par d√©faut
help: ## Afficher cette aide
	@echo "Gestionnaire NFC - Commandes de d√©ploiement"
	@echo ""
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)

# === COMMANDES DE D√âVELOPPEMENT ===

dev: ## D√©marrer l'environnement de d√©veloppement
	@echo "üöÄ D√©marrage de l'environnement de d√©veloppement..."
	@echo "Backend: http://localhost:$(BACKEND_PORT) | Frontend: http://localhost:$(FRONTEND_PORT)"
	@export PORT=$(BACKEND_PORT) && export FRONTEND_PORT=$(FRONTEND_PORT) && npm run dev

dev-backend: ## D√©marrer uniquement le backend en d√©veloppement
	@echo "üîß D√©marrage du backend sur le port $(BACKEND_PORT)..."
	cd backend && PORT=$(BACKEND_PORT) npm run dev

dev-frontend: ## D√©marrer uniquement le frontend en d√©veloppement
	@echo "üé® D√©marrage du frontend sur le port $(FRONTEND_PORT)..."
	cd frontend && npm run dev -- --port $(FRONTEND_PORT)

# === COMMANDES DE BUILD ===

build: ## Builder les images Docker
	@echo "üî® Construction des images Docker..."
	docker compose -f $(COMPOSE_FILE) build

build-nocache: ## Builder les images Docker sans cache
	@echo "üî® Construction des images Docker (sans cache)..."
	docker compose -f $(COMPOSE_FILE) build --no-cache

build-backend: ## Builder uniquement l'image backend
	@echo "üîß Construction de l'image backend..."
	docker compose -f $(COMPOSE_FILE) build backend

build-backend-nocache: ## Builder uniquement l'image backend sans cache
	@echo "üîß Construction de l'image backend (sans cache)..."
	docker compose -f $(COMPOSE_FILE) build --no-cache backend

build-frontend: ## Builder uniquement l'image frontend
	@echo "üé® Construction de l'image frontend..."
	docker compose -f $(COMPOSE_FILE) build frontend

build-frontend-nocache: ## Builder uniquement l'image frontend sans cache
	@echo "üé® Construction de l'image frontend (sans cache)..."
	docker compose -f $(COMPOSE_FILE) build --no-cache frontend

# === COMMANDES DE D√âPLOIEMENT ===

up: ## D√©marrer tous les services
	@echo "üöÄ D√©marrage des services..."
	docker compose -f $(COMPOSE_FILE) up -d

up-db: ## D√©marrer uniquement la base de donn√©es
	@echo "üóÑÔ∏è  D√©marrage de la base de donn√©es..."
	docker compose -f $(COMPOSE_FILE) up -d db

up-backend: ## D√©marrer backend + base de donn√©es
	@echo "üîß D√©marrage du backend..."
	docker compose -f $(COMPOSE_FILE) up -d db backend

up-frontend: ## D√©marrer tous les services
	@echo "üé® D√©marrage du frontend..."
	docker compose -f $(COMPOSE_FILE) up -d

down: ## Arr√™ter tous les services
	@echo "üõë Arr√™t des services..."
	docker compose -f $(COMPOSE_FILE) down

restart: ## Red√©marrer tous les services
	@echo "üîÑ Red√©marrage des services..."
	$(MAKE) down
	$(MAKE) up

# === COMMANDES DE MONITORING ===

logs: ## Afficher les logs de tous les services
	docker compose -f $(COMPOSE_FILE) logs -f

logs-backend: ## Afficher les logs du backend
	docker compose -f $(COMPOSE_FILE) logs -f backend

logs-frontend: ## Afficher les logs du frontend
	docker compose -f $(COMPOSE_FILE) logs -f frontend

logs-db: ## Afficher les logs de la base de donn√©es
	docker compose -f $(COMPOSE_FILE) logs -f db

status: ## Afficher le statut des services
	@echo "üìä Statut des services:"
	docker compose -f $(COMPOSE_FILE) ps

# === COMMANDES DE BASE DE DONN√âES ===

migrate: ## Ex√©cuter les migrations de base de donn√©es
	@echo "üóÑÔ∏è  Ex√©cution des migrations..."
	docker compose -f $(COMPOSE_FILE) exec backend npx prisma migrate deploy

migrate-dev: ## Cr√©er et appliquer une nouvelle migration (dev)
	@echo "üóÑÔ∏è  Cr√©ation de migration de d√©veloppement..."
	cd backend && npx prisma migrate dev

db-studio: ## Ouvrir Prisma Studio
	@echo "üîç Ouverture de Prisma Studio..."
	cd backend && npx prisma studio

db-reset: ## Reset complet de la base de donn√©es (ATTENTION!)
	@echo "‚ö†Ô∏è  Reset de la base de donn√©es..."
	@read -p "√ätes-vous s√ªr? Cette action est irr√©versible. [y/N] " confirm && [ "$$confirm" = "y" ]
	docker compose -f $(COMPOSE_FILE) exec backend npx prisma migrate reset --force

db-seed: ## Charger les donn√©es de test
	@echo "üå± Chargement des donn√©es de test..."
	docker compose -f $(COMPOSE_FILE) exec backend npm run db:seed

# === COMMANDES DE QUALIT√â ===

test: ## Ex√©cuter tous les tests
	@echo "üß™ Ex√©cution des tests..."
	npm run test

test-backend: ## Ex√©cuter les tests backend
	@echo "üîß Tests backend..."
	npm run test:backend

test-frontend: ## Ex√©cuter les tests frontend
	@echo "üé® Tests frontend..."
	npm run test:frontend

lint: ## V√©rifier le style de code
	@echo "üßπ V√©rification du style..."
	npm run lint

lint-fix: ## Corriger automatiquement le style
	@echo "üîß Correction automatique du style..."
	npm run lint:fix

typecheck: ## V√©rifier les types TypeScript
	@echo "üîç V√©rification des types..."
	npm run typecheck

# === COMMANDES DE NETTOYAGE ===

clean: ## Nettoyer les containers, images et volumes
	@echo "üßπ Nettoyage..."
	docker compose -f $(COMPOSE_FILE) down -v --remove-orphans
	docker system prune -f

clean-all: ## Nettoyage complet (ATTENTION!)
	@echo "‚ö†Ô∏è  Nettoyage complet..."
	@read -p "√ätes-vous s√ªr? Cette action supprimera tout. [y/N] " confirm && [ "$$confirm" = "y" ]
	docker compose -f $(COMPOSE_FILE) down -v --remove-orphans
	docker system prune -af
	docker volume prune -f

clean-node: ## Nettoyer les node_modules
	@echo "üßπ Nettoyage des d√©pendances..."
	npm run clean

# === COMMANDES DE PRODUCTION ===

deploy: build up ## D√©ployer en production (build + up)
	@echo "üöÄ D√©ploiement en production termin√©!"

deploy-nocache: build-nocache up ## D√©ployer en production sans cache (build + up)
	@echo "üöÄ D√©ploiement en production (sans cache) termin√©!"

deploy-backend: build-backend up-backend ## D√©ployer uniquement le backend
	@echo "üîß D√©ploiement backend termin√©!"

deploy-backend-nocache: build-backend-nocache up-backend ## D√©ployer uniquement le backend sans cache
	@echo "üîß D√©ploiement backend (sans cache) termin√©!"

deploy-frontend: build-frontend up-frontend ## D√©ployer uniquement le frontend
	@echo "üé® D√©ploiement frontend termin√©!"

deploy-frontend-nocache: build-frontend-nocache up-frontend ## D√©ployer uniquement le frontend sans cache
	@echo "üé® D√©ploiement frontend (sans cache) termin√©!"

# === COMMANDES D'INSTALLATION ===

install: ## Installer toutes les d√©pendances
	@echo "üì¶ Installation des d√©pendances..."
	npm run setup

install-backend: ## Installer les d√©pendances backend
	@echo "üîß Installation backend..."
	npm run setup:backend

install-frontend: ## Installer les d√©pendances frontend
	@echo "üé® Installation frontend..."
	npm run setup:frontend

# === COMMANDES DE VALIDATION ===

check: typecheck lint test ## V√©rifications compl√®tes avant commit
	@echo "‚úÖ Toutes les v√©rifications sont pass√©es!"

# === COMMANDES D'EXPORT ===

backup-db: ## Sauvegarder la base de donn√©es
	@echo "üíæ Sauvegarde de la base de donn√©es..."
	mkdir -p ./backups
	docker compose -f $(COMPOSE_FILE) exec db pg_dump -U postgres nfc_equipment > ./backups/backup_$(shell date +%Y%m%d_%H%M%S).sql

# Valeurs par d√©faut
.DEFAULT_GOAL := help